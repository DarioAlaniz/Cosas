/*
 * Copyright (C) 2009 - 2019 Xilinx, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 *
 */

#include <stdio.h>
#include <string.h>
#include "xparameters.h"
#include "lwip/err.h"
#include "lwip/tcp.h"
#if defined (__arm__) || defined (__aarch64__)
#include "xil_printf.h"
#endif

/*include agregados*/
#include "xaxicdma.h"
#include "xil_cache.h"
#include "mblaze_nt_types.h"

/*define y variables agregadas*/
#define MEN_BASE_DDR3	XPAR_MIG_7SERIES_0_BASEADDR
#define BUS_DATA_TX		(MEN_BASE_DDR3 + 0x20000000)
#define BUS_DATA_RX		XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR
#define BUS_LENGTH		64U

extern XAxiCdma AxiCdmaInstance;
unsigned int length = BUS_LENGTH;			/*longitud de los buffer*/
u32_t* BusDataTx =(u32_t*) BUS_DATA_TX;
u32_t* BusDataRx = (u32_t*) BUS_DATA_RX;

static u8* DataTx = (u8*)BUS_DATA_TX;
static u8* DataRx = (u8*)BUS_DATA_RX;

volatile boolean Done;	/*Transferencia completa*/
volatile boolean Error; /*Transferencia erronea*/

unsigned int count=0;	/*lleva la cuenta de datos escritos*/
u8_t Retries=10U; 		/*intentos de trasnferencia DMA*/

char texto[]="llego un paquete \r";

int transfer_data() {
	return 0;
}

void print_app_header()
{
#if (LWIP_IPV6==0)
	xil_printf("\n\r\n\r-----lwIP TCP echo server ------\n\r");
#else
	xil_printf("\n\r\n\r-----lwIPv6 TCP echo server ------\n\r");
#endif
	xil_printf("TCP packets sent to port 6001 will be echoed back\n\r");
}

/*comprueba si la transferencia fue exitosa, la llaman desde XAxiCdma_IntrHandler*/
static void SimpleCallBack(void* CallBackRef, u32 IrqMask, int *IgnorePtr){
	if (IrqMask & XAXICDMA_XR_IRQ_ERROR_MASK) {
		Error = TRUE;
	}

	if (IrqMask & XAXICDMA_XR_IRQ_IOC_MASK) {
		Done = TRUE;
	}
}

/*Simplet transferencia por CDMA
 * */
static int dosimpletransfer(u8* SrcPtr,u8* DestPtr,unsigned int length, u8 Intentos,XAxiCdma* InstPtr){
	/*Vaciamos el cache antes de la transferencia*/
	Xil_DCacheFlushRange((UINTPTR)SrcPtr, length);
	Xil_DCacheFlushRange((UINTPTR)DestPtr, length);
	/*intentamos varias veces en caso de que no pueda transmitir a la primera*/
	while(Intentos){
		Intentos-=1;
		int status = XAxiCdma_SimpleTransfer(InstPtr,(UINTPTR)SrcPtr,(UINTPTR)DestPtr,
											length, SimpleCallBack, (void*) InstPtr);
		if(status==XST_SUCCESS){
			xil_printf("Transferencia completada\n\r");
			break;
		}
	}
	if(!Intentos){
		xil_printf("Error en %d intentos de transferencia\n\r",Intentos);
		return XST_FAILURE;
	}
	while (!Done && !Error) {
			/* espero hasta que por la interrupcion confirme la transferencia */
	}
	if (Error){
		xil_printf("Error de interrupcion\n\r");
		return XST_FAILURE;
	}
	/*invalido el cache antes de recivir los datos*/
	Xil_DCacheInvalidateRange((UINTPTR)DestPtr, length);
	return XST_SUCCESS;
}


err_t recv_callback(void *arg, struct tcp_pcb *tpcb,
                               struct pbuf *p, err_t err)
{
	void* payload = p->payload;
	/* do not read the packet if we are not in ESTABLISHED state */
	if (!p) {
		tcp_close(tpcb);
		tcp_recv(tpcb, NULL);
		return ERR_OK;
	}

	/* indicate that the packet has been received */
	tcp_recved(tpcb, p->len);

	/* echo back the payload */
	/* in this case, we assume that the payload is < TCP_SND_BUF */
	if (tcp_sndbuf(tpcb) > p->len) {
		xil_printf("\nRecivido %d bytes\n\r",p->len-2);
		/*se van copiando los datos en la parte designada de la DDR3,
		 * se hace que sea len-2 para evitar guardar \r y \n por cada payload
		 * que llega*/
		for (int i=0;i<(p->len-2);i++){
			char data=(char) *((char*)payload);
			xil_printf("%c",data);
			if ( data == ' '){
				/*si viene un caracter que no tenga nada no se guarda*/
			}
			else {
				*DataTx = data;
				DataTx++;
				count++;
			}
			payload = (char*)payload + 1;
			/*si se llego al limite de posiciones escritas se hace un paso hacia la BRAM*/
			if(count==BUS_LENGTH){
				count = 0;
				DataTx = (u8*) BUS_DATA_TX;
				xil_printf("\nbuffer lleno, preparando para transferir a la BRAM\n\r");
				/*Muevo los datos hacia la BRAM*/
				int status = dosimpletransfer(DataTx,DataRx,length,Retries,&AxiCdmaInstance);
				if (status!=XST_SUCCESS){
					xil_printf("No se pudo completar la transferencia\n\r");
				}
				else {
					xil_printf("Borrando buffer de entrada para nuevos datos\n\r");
					memset((void *)BusDataTx, 0, length);
				}
				/*vuelvo a enviar por el echo los datos recividos*/
				err = tcp_write(tpcb, (void*) BUS_DATA_RX, BUS_LENGTH, 1);
			}
		}
//		err = tcp_write(tpcb, p->payload, p->len, 1);
		tcp_write(tpcb, (void*)texto , sizeof(texto), 1);
	} else
		xil_printf("no space in tcp_sndbuf\n\r");

	/* free the received pbuf */
	pbuf_free(p);

	return ERR_OK;
}

err_t accept_callback(void *arg, struct tcp_pcb *newpcb, err_t err)
{
	static int connection = 1;

	/* set the receive callback for this connection */
	tcp_recv(newpcb, recv_callback);

	/* just use an integer number indicating the connection id as the
	   callback argument */
	tcp_arg(newpcb, (void*)(UINTPTR)connection);

	/* increment for subsequent accepted connections */
	connection++;

	return ERR_OK;
}


int start_application()
{
	struct tcp_pcb *pcb;
	err_t err;
	unsigned port = 7;

	/* create new TCP PCB structure */
	pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
	if (!pcb) {
		xil_printf("Error creating PCB. Out of Memory\n\r");
		return -1;
	}

	/* bind to specified @port */
	err = tcp_bind(pcb, IP_ANY_TYPE, port);
	if (err != ERR_OK) {
		xil_printf("Unable to bind to port %d: err = %d\n\r", port, err);
		return -2;
	}

	/* we do not need any arguments to callback functions */
	tcp_arg(pcb, NULL);

	/* listen for connections */
	pcb = tcp_listen(pcb);
	if (!pcb) {
		xil_printf("Out of memory while tcp_listen\n\r");
		return -3;
	}

	/* specify callback to use for incoming connections */
	tcp_accept(pcb, accept_callback);

	xil_printf("TCP echo server started @ port %d\n\r", port);

	return 0;
}
