/*
 * Copyright (C) 2009 - 2019 Xilinx, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 *
 */

#include <stdio.h>

#include "xparameters.h"

#include "netif/xadapter.h"

#include "platform.h"
#include "platform_config.h"
#if defined (__arm__) || defined(__aarch64__)
#include "xil_printf.h"
#endif

#include "lwip/tcp.h"
#include "xil_cache.h"

#if LWIP_IPV6==1
#include "lwip/ip.h"
#else
#if LWIP_DHCP==1
#include "lwip/dhcp.h"
#endif
#endif

/*define y variables agregadas*/
#include "mblaze_nt_types.h"
#include "string.h"
#include "xaxidma.h"

#define MAX_BUFFER_LEN			32768U
#define MEN_BASE_DDR3	        XPAR_MIG_7SERIES_0_BASEADDR
#define BUS_DATA_TX		       	(MEN_BASE_DDR3 + 0x20000000)
#define BUS_DATA_RX				(MEN_BASE_DDR3 + 0x20100000)


/* defined by each RAW mode application */
void print_app_header();
int start_application();
int transfer_data();
void tcp_fasttmr(void);
void tcp_slowtmr(void);

/* missing declaration in lwIP */
void lwip_init();

#if LWIP_IPV6==0
#if LWIP_DHCP==1
extern volatile int dhcp_timoutcntr;
err_t dhcp_start(struct netif *netif);
#endif
#endif

extern volatile int TcpFastTmrFlag;
extern volatile int TcpSlowTmrFlag;
static struct netif server_netif;
struct netif *echo_netif;

/*Variables for the application*/
//extern struct pbuf* pbuf_recv;
extern unsigned char* payload_ext;
extern u16_t payload_len_ext;
extern boolean flag_recv;
extern XAxiDma AxiDmaInstance;

/*Interrupt of dma*/
extern volatile int TxDone;
extern volatile int RxDone;
extern volatile int Error;
extern struct tcp_pcb *tpcb_extern;

volatile boolean flag_head=FALSE;
volatile u16_t size_payload;
u16_t size_pack_recv;
u32_t* BusDataTx =(u32_t*) BUS_DATA_TX;
u32_t* BusDataRx =(u32_t*) BUS_DATA_RX;
u8_t* DataTx = (u8_t*)BUS_DATA_TX;
u8_t* DataRx = (u8_t*)BUS_DATA_RX;
u16_t payload_len_add;

#if LWIP_IPV6==1
void print_ip6(char *msg, ip_addr_t *ip)
{
	print(msg);
	xil_printf(" %x:%x:%x:%x:%x:%x:%x:%x\n\r",
			IP6_ADDR_BLOCK1(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK2(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK3(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK4(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK5(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK6(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK7(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK8(&ip->u_addr.ip6));

}
#else
void
print_ip(char *msg, ip_addr_t *ip)
{
	print(msg);
	xil_printf("%d.%d.%d.%d\n\r", ip4_addr1(ip), ip4_addr2(ip),
			ip4_addr3(ip), ip4_addr4(ip));
}

void
print_ip_settings(ip_addr_t *ip, ip_addr_t *mask, ip_addr_t *gw)
{

	print_ip("Board IP: ", ip);
	print_ip("Netmask : ", mask);
	print_ip("Gateway : ", gw);
}
#endif

int DMA_send_data(u8_t* BuffAddrSrc,u8_t* BuffAddrDst,u32 Length, int Direction){
	int Status;
	int Direcction_device_to_dma = (Direction == 1) ? 0 : 1;
	/* Disable all interrupts before setup */
	XAxiDma_IntrDisable(&AxiDmaInstance, XAXIDMA_IRQ_ALL_MASK,
						XAXIDMA_DMA_TO_DEVICE);
	XAxiDma_IntrDisable(&AxiDmaInstance, XAXIDMA_IRQ_ALL_MASK,
			XAXIDMA_DEVICE_TO_DMA);
	/* Enable all interrupts */
	XAxiDma_IntrEnable(&AxiDmaInstance, XAXIDMA_IRQ_ALL_MASK,
						XAXIDMA_DMA_TO_DEVICE);
	XAxiDma_IntrEnable(&AxiDmaInstance, XAXIDMA_IRQ_ALL_MASK,
						XAXIDMA_DEVICE_TO_DMA);

	TxDone = 0;
	RxDone = 0;
	Error = 0;
	/* Flush the buffers before the DMA transfer, in case the Data Cache
		 * is enabled
		 */
	Xil_DCacheFlushRange((UINTPTR)BuffAddrSrc, Length*2);
	Xil_DCacheFlushRange((UINTPTR)BuffAddrDst, Length*2);

	Status = XAxiDma_SimpleTransfer(&AxiDmaInstance,(UINTPTR) BuffAddrDst,
								Length, Direcction_device_to_dma);
		if (Status != XST_SUCCESS) {
			return XST_FAILURE;
		}

	Status = XAxiDma_SimpleTransfer(&AxiDmaInstance,(UINTPTR) BuffAddrSrc,
							Length, Direction);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	/*check out bytes transfers in lila!!!!*/
	/*wait while Txdone ,Rxdone set */
	while(!TxDone && !RxDone && !Error){
		/*nop*/
	}

	return XST_SUCCESS;
}

int main()
{
#if LWIP_IPV6==0
	ip_addr_t ipaddr, netmask, gw;

#endif
	/* the mac address of the board. this should be unique per board */
	unsigned char mac_ethernet_address[] =
	{ 0x00, 0x0a, 0x35, 0x00, 0x01, 0x02 };

	echo_netif = &server_netif;
#if defined (__arm__) && !defined (ARMR5)
#if XPAR_GIGE_PCS_PMA_SGMII_CORE_PRESENT == 1 || XPAR_GIGE_PCS_PMA_1000BASEX_CORE_PRESENT == 1
	ProgramSi5324();
	ProgramSfpPhy();
#endif
#endif

/* Define this board specific macro in order perform PHY reset on ZCU102 */
#ifdef XPS_BOARD_ZCU102
	if(IicPhyReset()) {
		xil_printf("Error performing PHY reset \n\r");
		return -1;
	}
#endif

	init_platform();

#if LWIP_IPV6==0
#if LWIP_DHCP==1
    ipaddr.addr = 0;
	gw.addr = 0;
	netmask.addr = 0;
#else
	/* initialize IP addresses to be used */
	IP4_ADDR(&ipaddr,  172, 16,   0, 91);
	IP4_ADDR(&netmask, 255, 255, 255,  0);
	IP4_ADDR(&gw,      172, 16,   0,  10);
#endif
#endif
	print_app_header();

	lwip_init();

#if (LWIP_IPV6 == 0)
	/* Add network interface to the netif_list, and set it as default */
	if (!xemac_add(echo_netif, &ipaddr, &netmask,
						&gw, mac_ethernet_address,
						PLATFORM_EMAC_BASEADDR)) {
		xil_printf("Error adding N/W interface\n\r");
		return -1;
	}
#else
	/* Add network interface to the netif_list, and set it as default */
	if (!xemac_add(echo_netif, NULL, NULL, NULL, mac_ethernet_address,
						PLATFORM_EMAC_BASEADDR)) {
		xil_printf("Error adding N/W interface\n\r");
		return -1;
	}
	echo_netif->ip6_autoconfig_enabled = 1;

	netif_create_ip6_linklocal_address(echo_netif, 1);
	netif_ip6_addr_set_state(echo_netif, 0, IP6_ADDR_VALID);

	print_ip6("\n\rBoard IPv6 address ", &echo_netif->ip6_addr[0].u_addr.ip6);

#endif
	netif_set_default(echo_netif);

	/* now enable interrupts */
	platform_enable_interrupts();

	/* specify that the network if is up */
	netif_set_up(echo_netif);

#if (LWIP_IPV6 == 0)
#if (LWIP_DHCP==1)
	/* Create a new DHCP client for this interface.
	 * Note: you must call dhcp_fine_tmr() and dhcp_coarse_tmr() at
	 * the predefined regular intervals after starting the client.
	 */
	dhcp_start(echo_netif);
	dhcp_timoutcntr = 24;

	while(((echo_netif->ip_addr.addr) == 0) && (dhcp_timoutcntr > 0))
		xemacif_input(echo_netif);

	if (dhcp_timoutcntr <= 0) {
		if ((echo_netif->ip_addr.addr) == 0) {
			xil_printf("DHCP Timeout\r\n");
			xil_printf("Configuring default IP of 192.168.1.10\r\n");
			IP4_ADDR(&(echo_netif->ip_addr),  192, 168,   1, 10);
			IP4_ADDR(&(echo_netif->netmask), 255, 255, 255,  0);
			IP4_ADDR(&(echo_netif->gw),      192, 168,   1,  1);
		}
	}

	ipaddr.addr = echo_netif->ip_addr.addr;
	gw.addr = echo_netif->gw.addr;
	netmask.addr = echo_netif->netmask.addr;
#endif

	print_ip_settings(&ipaddr, &netmask, &gw);

#endif
	/* start the application (web server, rxtest, txtest, etc..) */
	start_application();

	memset((void *)BusDataTx, 0, MAX_BUFFER_LEN);
	memset((void *)BusDataRx, 0, MAX_BUFFER_LEN);

	/* receive and process packets */
	while (1) {
		if (TcpFastTmrFlag) {
			tcp_fasttmr();
			TcpFastTmrFlag = 0;
		}
		if (TcpSlowTmrFlag) {
			tcp_slowtmr();
			TcpSlowTmrFlag = 0;
		}
		xemacif_input(echo_netif);
/*TODO: Recognition of frame and copy of data*/
		if (flag_recv){
			flag_recv = FALSE;
			/*variables local*/
			unsigned char data;
			u16_t payload_len_present = payload_len_ext;
			unsigned char * payload = payload_ext;

			if (!flag_head){
				data = (unsigned char)*payload;
				/*check out head*/
				if (data==0xAA){
					flag_head = TRUE;
					payload_len_add=0;
					size_pack_recv=0;
					payload++;
					data= (unsigned char)*payload;
					/*	write data in gpio
					 * */
					payload++;
					data= (unsigned char)*payload; //get low size pack
					size_pack_recv =  data;
					payload++;
					data= (unsigned char)*payload; //get high size pack
					size_pack_recv |=  (data<<8);
					payload++;
					payload_len_add = payload_len_present-4;

					/*if receive one pack of 1024 (pack of 1019 + star frame+ gpio + size_l + size_h+ end frame)*/
					if(size_pack_recv==1019){
						MEMCPY(DataTx,(u8_t*)payload,payload_len_add-1);
						data = (unsigned char)*(payload+payload_len_add-1);//get end byte of frame
						if(data==0x55) {
							int Status = DMA_send_data(DataTx,DataRx,size_pack_recv,XAXIDMA_DMA_TO_DEVICE);
							if (Status != XST_SUCCESS)
								xil_printf("Problem in send byte by DMA\r\n");
							flag_head=FALSE;
						}
					}
					else
						MEMCPY(DataTx,(u8_t*)payload,payload_len_add); //copy byte in DataTx
				}
			}

			else {
				//DataTx = DataTx + payload_len_add;
				/*Si viene el ultimo paquete que contiene el final de trama ese byte
				 * no se guarda*/
				if(payload_len_add+payload_len_present >= size_pack_recv){
					payload_len_present = size_pack_recv - payload_len_add;
					/*copy end byte*/
					MEMCPY(DataTx+payload_len_add,(u8_t*)payload,payload_len_present);
					data= (unsigned char) *(payload+payload_len_present); //get the end of frame
					/*send byte in buffer by dma*/
					if(data==0x55){
						int Status = DMA_send_data(DataTx,DataRx,size_pack_recv,XAXIDMA_DMA_TO_DEVICE);
						if (Status != XST_SUCCESS)
							xil_printf("Problem in send byte\r\n");
						//xil_printf("Send bytes by dma\r\n");
						flag_head=FALSE;

						/*rebroadcast bytes (success)*/
						if(size_pack_recv>tcp_sndbuf(tpcb_extern)){
							u16_t byte_send=TCP_SND_BUF;
							u16_t pointer_counter=0;
							boolean valid=TRUE;
							while(valid){
								Status = tcp_write(tpcb_extern,(void *)DataRx+pointer_counter, byte_send, 2);
								if (Status != XST_SUCCESS)
									xil_printf("Problem in send bytes\r\n");
								pointer_counter=+ TCP_SND_BUF;
								if(byte_send+TCP_SND_BUF>size_pack_recv){
									byte_send = size_pack_recv - byte_send;
									Status = tcp_write(tpcb_extern,(void *)DataRx+pointer_counter, byte_send, 0);
									if (Status != XST_SUCCESS)
										xil_printf("Problem in send end bytes\r\n");
									valid=FALSE;
								}
								else {
									byte_send =+ TCP_SND_BUF;
								}
							}
						}
						/*
						memset((void *)DataTx, 0, size_pack_recv);
						Status = DMA_send_data(DataRx,DataTx,size_pack_recv,XAXIDMA_DMA_TO_DEVICE);
						if (Status != XST_SUCCESS)
							xil_printf("Problem in rebroadcast byte\r\n");
						*/
					}
				}
				else {
					MEMCPY(DataTx+payload_len_add,(u8_t*)payload,payload_len_present);
					payload_len_add += payload_len_present;
				}
			}
 			size_payload += payload_len_ext;
 			xil_printf("received packet:%d\r\n",size_payload);
		}
		/*
		 * para recibir por dma tiene que ser el mismo payload
		 *
		 * */
	}

	/* never reached */
	cleanup_platform();

	return 0;
}


